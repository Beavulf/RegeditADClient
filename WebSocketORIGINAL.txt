import { createContext, useContext, useState, useEffect, useCallback } from 'react';
import useWebSocket from 'react-use-websocket';
import dayjs from 'dayjs';
import 'dayjs/locale/ru'
dayjs.locale('ru');

// Создаем контекст для WebSocket
const WebSocketContext = createContext();

// Провайдер контекста, который оборачивает весь ваш компонент
export const WebSocketProvider = ({ children, token }) => {
  const [socketUrl] = useState(`ws://localhost:3000?token=${token}`); // URL WebSocket сервера
  const [loading, setLoading] = useState(true);
  //список загружаемых таблиц вначале
  const loadCollection = [
    `Users`, `Otdel`, `Doljnost`, `Sotrudnik`, `Pdoka`
  ]
  //хранение всех таблиц в переменной data
  const [data, setData] = useState({
    Users: [],
    Otdel: [],
    Doljnost: [],
    Sotrudnik: [],
    Pdoka: [],
    Clients: []
  })
   
  // Оборачиваем loadData в useCallback для предотвращения лишних перерендеров
  const loadData = useCallback(async (collection) => {
      const threeDaysAgo = dayjs().subtract(3, 'day').toISOString();
      const message = {
          type: 'getCollectionMongoose',
          data: {
              collection: collection,
              filter: collection === `Pdoka` ? { data_dob: { $gte: threeDaysAgo } } : {},
          },
      };
      try {
          sendJsonMessage(message);
      } catch (error) {
          console.error(`Error sending message for ${collection}:`, error);
          // Обработка ошибки отправки, например, повторная попытка или отображение сообщения пользователю
      }
  }, [sendJsonMessage]);

// //отправка сообщение веб сокету для 3агру3ки таблиц
// const loadData = (collection) => {
//   const threeDaysAgo = dayjs().subtract(3, 'day').toISOString()
  
//   const message = {
//        type: 'getCollectionMongoose',
//        data: {
//          collection: collection,
//          filter: collection === `Pdoka` ? { data_dob:{ $gte: threeDaysAgo } } : {},
//        }   
//    }
//    sendJsonMessage(message);
//  }

  const { sendJsonMessage, lastJsonMessage, readyState, lastMessage, sendMessage } = useWebSocket(socketUrl, {
    shouldReconnect: (closeEvent) => true,
    reconnectInterval: 3000,
    reconnectAttempts: 5,
    onError: (error) => {
      console.error('WebSocket error:', error);
    },
    onOpen: async () => {
      console.log('WebSocket connected, load DATA');
      setLoading(true);
      //подгру3ка таблиц при подключение к серверу
      // loadCollection.map((collection)=>loadData(collection))
      // sendJsonMessage({type: `getAllClientsIp`})
      try {
        await Promise.all(loadCollection.map(async (collection) => loadData(collection)));
        sendJsonMessage({ type: `getAllClientsIp` });
      } catch (error) {
          console.error("Error loading initial data:", error);
          // Обработка ошибки загрузки данных
      }
      finally{
          setLoading(false); // Устанавливаем состояние загрузки в false после загрузки всех данных или ошибки
      }
    },
    onClose: () => {
      console.log('WebSocket disconnected');
    },
    onMessage: (message) => {
      const serverMassage = JSON.parse(message.data)
      // console.log(serverMassage);
      
      //получение всех 3аписей таблицы и 3агру3ка клиенту
      if (serverMassage.type === 'getCollectionMongoose') {
        const { collection, data } = serverMassage;
        setData((prevData) => ({
          ...prevData,
          [collection]: data, // Добавляем или обновляем коллекцию
        }));
      }
      
      if (serverMassage.clients) {
        const { clients } = serverMassage;
        setData((prevData) => ({
         ...prevData,
          Clients: clients, // Добавляем или обновляем коллекцию
        }));
        
      }

      if (['insert', 'update', 'delete', 'drop', 'rename', 'replace'].includes(serverMassage.type)){
        const { collection, id, full } = serverMassage;
        // Обновляем данные для соответствующей коллекции
        setData((prevData) => {
          let newCollectionData = [...prevData[collection]];
          
          if (serverMassage.type === 'insert') {
            newCollectionData.unshift(full);

          } 
          else if (serverMassage.type === 'update') {
            if (Array.isArray(full)) {
                // Если обновлены несколько документов
                newCollectionData = newCollectionData.map((item) => {
                    const updatedItem = full.find((updated) => updated._id === item._id);
                    return updatedItem ? { ...item, ...updatedItem } : item;
                });
            } else {
                // Одиночное обновление
                newCollectionData = newCollectionData.map((item) =>
                    item._id === id ? { ...item, ...full } : item
                );
            }
        
            if ([`Otdel`, `Doljnost`].includes(serverMassage.collection)) {
                loadData(`Sotrudnik`);
            }
          }    
          else if (serverMassage.type === 'delete') {
            newCollectionData = newCollectionData.filter((item) => item._id !== id);
          }

          return {
            ...prevData,
            [collection]: newCollectionData, // Обновляем коллекцию
          };
        });
      }//
    },
  });
  
  

  return (
    <WebSocketContext.Provider value={{ sendJsonMessage, lastJsonMessage, readyState, lastMessage, sendMessage, data }}>
      {children}
    </WebSocketContext.Provider>
  );
};

// Хук для использования контекста
export const useWebSocketContext = () => {
  return useContext(WebSocketContext);
};
